#!/usr/bin/env python
# Copyright: 2006 Marien Zwart <marienz@gentoo.org>
# License: GPL2

"""Configuration querying utility."""

from pkgcore.config import errors
from pkgcore.util import commandline, formatters


class OptionParser(commandline.OptionParser):

    """Our option parser."""

    def __init__(self):
        commandline.OptionParser.__init__(self, description=__doc__)
        self.add_option('--info', action='store_true',
                        help='Print a summary of the configuration.')
        self.add_option('--dump', action='store_true',
                        help='Dump the entire configuration.'
                        'The format used is similar to the ini-like default '
                        'format, but do not rely on this to always write a '
                        'loadable config. There may be quoting issues.')
        self.add_option('--classes', action='store_true',
                        help='List all classes referenced by the config.')
        self.add_option('--uncollapsable', action='store_true',
                        help='show things that could not be collapsed.')

    def check_values(self, vals, args):
        vals, args = commandline.OptionParser.check_values(self, vals, args)
        modes = sum(getattr(vals, attr) and 1 or 0
                    for attr in ['info', 'dump', 'classes', 'uncollapsable'])
        if modes > 1:
            self.error('specify only one mode please')
        if not modes:
            self.error('nothing to do!')
        return vals, args


def dump_section(config, out, sections):
    out.first_prefix.append('    ')
    out.write('# type: %s' % (config.type.name,))
    out.write('class %s.%s;' % (config.type.callable.__module__,
                                config.type.callable.__name__))
    for key, val in sorted(config.config.iteritems()):
        typename = config.type.types.get(key)
        if typename is None:
            if config.type.allow_unknowns:
                typename = 'str'
            else:
                out.write('# huh, no type set for %s (%r)' % (key, val))
                continue
        if typename == 'str':
            out.write('%s %r;' % (key, val))
        elif typename == 'bool':
            out.write('%s %s;' % (key, bool(val)))
        elif typename == 'list':
            out.write('%s %s;' % (
                    key, ' '.join(repr(string) for string in val)))
        elif typename == 'callable':
            out.write('%s %s.%s' % (key, val.__module__, val.__name__))
        elif typename == 'section_ref' or typename.startswith('ref:'):
            name = sections.get(val)
            if name is None:
                out.write('%s {' % (key,))
                dump_section(val, out, sections)
                out.write('};')
            else:
                out.write('%s %r;' % (key, name))
        elif typename == 'section_refs' or typename.startswith('refs:'):
            out.autoline = False
            out.write('%s' % (key,))
            for i, subconf in enumerate(val):
                name = sections.get(subconf)
                if name is None:
                    out.autoline = True
                    out.write(' {')
                    dump_section(subconf, out, sections)
                    out.autoline = False
                    out.write('}')
                else:
                    out.write(' %r' % (name,))
            out.autoline = True
            out.write(';')
        else:
            out.write('# %s = %r of unknown type %s' % (key, val, typename))
    out.first_prefix.pop()


def get_classes(configs):
    """Return a set of referenced classes."""
    # Not particularly efficient (doesn't memoize already visited configs)
    classes = set()
    for config in configs:
        classes.add('%s.%s' % (config.type.callable.__module__,
                               config.type.callable.__name__))
        for key, val in config.config.iteritems():
            typename = config.type.types.get(key)
            if typename is None:
                continue
            if typename == 'section_ref' or typename.startswith('ref:'):
                classes.update(get_classes((val,)))
            elif typename == 'section_refs' or typename.startswith('refs:'):
                classes.update(get_classes(val))
    return classes


def main(config, options, out, err):
    """Do stuff.

    @param config: pkgcore config central.
    @param options: optparse option values.
    @type  out: L{pkgcore.util.formatters.Formatter} instance.
    @param out: stream to output on.
    @type  err: file-like object
    @param err: stream for errors (usually C{sys.stderr})
    """
    sections = []
    for name in config.sections():
        try:
            sections.append((name, config.collapse_named_section(name)))
        except errors.ConfigurationError, e:
            if options.uncollapsable:
                out.write(str(e))
                out.write()
            # Otherwise ignore this.
    if options.uncollapsable:
        return
    sections.sort()
    if options.info:
        out.write('XXX this is pretty useless, try --dump')
    elif options.dump:
        revmap = dict((config, name) for name, config in sections)
        for name, section in sections:
            out.write('%r {' % (name,))
            dump_section(section, out, revmap)
            out.write('}')
            out.write()
    elif options.classes:
        out.write('\n'.join(sorted(get_classes(
                        section for name, section in sections))))


if __name__ == '__main__':
    commandline.main(OptionParser(), main)
