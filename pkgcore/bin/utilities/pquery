#!/usr/bin/python
# Copyright: 2005-2006 Brian Harring <ferringb@gmail.com>
# License: GPL2

import os, operator
from pkgcore.ebuild.atom import atom
from pkgcore.restrictions import packages, values, boolean
from pkgcore.util.currying import pre_curry
from pkgcore.util import repo_utils, commandline
from pkgcore.util.packages import groupby_pkg

def grab_arg(arg, args):
    val = False
    try:
        while True:
            args.remove(arg)
            val = True
    except ValueError:
        pass
    return val

if __name__ == "__main__":
    import sys, pkgcore.config
    args = sys.argv[1:]
    raw = grab_arg("--raw", args)
    force_vdb = grab_arg("--vdb", args)
    force_virtuals = grab_arg("--virtuals-only", args)
    disable_virtuals = grab_arg("--disable-virtuals", args)

    if "--atomstr" in args:
        def atomstr(a, l=False):
            if l:
                l = iter(a)
            else:
                l = [a]
            s = []
            for x in l:
                if isinstance(x, atom):
                    s.append(x.atom_str())
                else:
                    s.append(str(x))
            return ' '.join(s)
        del args[a.index("--atomstr")]
    else:
        atomstr = lambda x, y=False: str(x)

    if len(args) == 0 or "--help" in args or (force_virtuals and disable_virtuals) or ("--max" in args and "--min" in args):
        print "supported args: [--raw] [--virtuals-only || --disable-virtuals ] [--vdb] [ --max || --min ] [--atomstr] [atom [ --attr attr ] ]*"
        sys.exit(1)
    conf = pkgcore.config.load_config()
    domain = conf.get_default("domain")
    if domain is None:
        print "no default domain specified in configuration- please fix your configuration"
        sys.exit(-1)
    repos = []
    if force_vdb:
        repos = domain.vdb
    else:
        repos = domain.repos
    if raw:
        repos = repo_utils.get_raw_repos(repos)
    if force_virtuals:
        repos = repo_utils.get_virtual_repos(repo_utils.get_raw_repos(repos))
    elif disable_virtuals:
        repos = repo_utils.get_virtual_repos(repo_utils.get_raw_repos(repos), False)

    atoms = []
    attr = []
    while "--attr" in args:
        i = args.index("--attr")
        args.pop(i)
        try:
            a = args.pop(i)
            attr.append((a, tuple(operator.attrgetter(x) for x in a.split("."))))
        except IndexError:
            print "need an arg to --attr!"
            sys.exit(1)


    results_filter = lambda a: a
    def less_pissy_builtins(func, *args, **kwds):
        try:
            return func(*args, **kwds)
        except ValueError:
            return []
    for s, f in (("--min", min), ("--max", max)):
        func = pre_curry(lambda inner_func,a: [inner_func(a)],
            pre_curry(less_pissy_builtins, f))
        if grab_arg(s, args):
            results_filter = func

    atoms = map(commandline.generate_restriction, args)

    if len(atoms) > 1:
        atoms = packages.OrRestriction(*atoms)
    for a in atoms:
        for repo in repos:
            for pkgs in groupby_pkg(results_filter(repo.itermatch(a, sorter=sorted))):
                for pkg in sorted(pkgs, reverse=True):
                    try:
                        print str(atomstr(pkg))
                    except AttributeError:
                        print str(pkg)
                    for x in attr:
                        o = pkg
                        try:
                            for f in x[1]:
                                o = f(o)
                            print "attr '%s' == %s" % (x[0], atomstr(o, True))
                        except AttributeError, ae:
                            print "attr '%s' exception: %s" % (x[0], ae)
                    print
        
