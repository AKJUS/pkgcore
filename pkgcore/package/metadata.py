# Copyright: 2005 Brian Harring <ferringb@gmail.com>
# License: GPL2

import weakref
import warnings
from pkgcore.util import caching

from cpv import CPV

class package(CPV):
	immutable = True

	_get_attr = dict(CPV._get_attr)
	
	def __init__(self, cpv, parent_repository):
		super(package,self).__init__(cpv)
		self.__dict__["_parent"] = parent_repository


	def __setattr__(self, *args, **kwargs):
		raise AttributeError


	def __delattr__(self, *args, **kwargs):
		raise AttributeError


	def __getitem__(self, key):
		try:	return getattr(self,key)
		except AttributeError:
			raise KeyError(key)


	# hack. :)
	_get_attr["metapkg"] = lambda *a: bool(warnings.warn("metapkg hack will be removed soon"))
	
	def _get_data(self):
		if "data" in self.__dict__:
			import traceback
			traceback.print_stack()
			warnings.warn("odd, got a request for data yet it's in the dict")
			return self.__dict__["data"]
		
		return self._fetch_metadata()
	_get_attr["data"] = _get_data

	def _fetch_metadata(self):
		raise NotImplementedError


class factory(object):
	child_class = package
	def __init__(self, parent_repo):
		self._parent_repo = parent_repo
		self._cached_instances = weakref.WeakValueDictionary()
		caching.class_hits.setdefault(self.__class__, 0)
		caching.class_misses.setdefault(self.__class__, 0)

	def new_package(self, cpv):
		if cpv in self._cached_instances:
			caching.class_hits[self.__class__] += 1
			return self._cached_instances[cpv]
		caching.class_misses[self.__class__] += 1
		d = self._get_new_child_data(cpv)
		m = self.child_class(cpv, self, *d[0], **d[1])
		self._cached_instances[cpv] = m
		return m

	def clear(self):
		self._cached_instances.clear()

	def __del__(self):
		self.clear()

	def _get_metadata(self, *args):
		raise NotImplementedError

	def _update_metadata(self, *args):
		raise NotImplementedError

	def _get_new_child_data(self, cpv):
		"""return pargs,kwargs for any new children generated by this factory.
		defaults to [], {}
		Probably will be rolled into a class/instance attribute whenever someone cleans this up"""
		return ([],{})
