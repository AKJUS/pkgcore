# Copyright: 2006 Brian Harring <ferringb@gmail.com>
# License: GPL2

from pkgcore.merge import triggers
from pkgcore.util.file import read_bash_dict, AtomicWriteFile
import os

colon_parsed = set(["ADA_INCLUDE_PATH",  "ADA_OBJECTS_PATH", "LDPATH", "MANPATH", 
	"PATH", "PRELINK_PATH", "PRELINK_PATH_MASK", "PYTHONPATH"])

incrementals = set(['ADA_INCLUDE_PATH', 'ADA_OBJECTS_PATH', 'CLASSPATH', 'CONFIG_PROTECT', 
	'CONFIG_PROTECT_MASK', 'INFODIR', 'INFOPATH', 'KDEDIRS', 'LDPATH', 'MANPATH', 
	'PATH', 'PRELINK_PATH', 'PRELINK_PATH_MASK', 'PYTHONPATH', 'ROOTPATH'])

def raw_env_update(reporter, cset):
	pjoin = os.path.join
	offset = reporter.offset
	if reporter.offset is None:
		offset = "/"
	base = pjoin(reporter.offset, "etc/env.d")
	collapsed_d = {}
	for x in sorted(os.listdir(base)):
		if x.endswith(".bak") or x.endswith("~") or x.startswith("._cfg"):
			continue
		d = read_bash_dict(pjoin(base, x))
		# inefficient, but works.
		for k in d:
			if k in incrementals:
				if k in colon_parsed:
					collapsed_d.setdefault(k, []).extend(d[k].split(":"))
				else:
					collapsed_d.setdefault(k, []).append(d[k])
			else:
				collapsed_d[k] = d[k]
		del d
	
	if "LDPATH" in collapsed_d:
		# we do an atomic rename instead of open and write quick enough (avoid the race iow)
		fp = pjoin(offset, "etc", "ld.so.conf")
		new_f = AtomicWriteFile(fp)
		new_f.write("# automatically generated, edit env.d files instead\n")
		new_f.writelines(x.strip() for x in collapsed_d)
		new_f.close()
		del collapsed_d["LDPATH"]
	
	d = {}
	for k, v in collapsed_d.iteritems():
		if k in colon_parsed:
			d[k] = ":".join(v)
		else:
			d[k] = v[-1]

	new_f = pjoin(offset, "etc", "profile.env")
	new_f.write("# autogenerated.  update env.d instead\n")
	new_f.writelines('export %s="%s"\n' % (k, v) for k,v in d.iteritems())
	new_f.close()
	new_f = pjoin(offset, "etc", "profile.csh")
	new_f.write("# autogenerated, update env.d instead\n")
	new_f.writelines('setenv %s="%s"\n' % (k, v) for k,v in d.iteritems())
	new_f.close()

def env_update_trigger(cset="install"):
	return triggers.SimpleTrigger(cset, raw_env_update)
