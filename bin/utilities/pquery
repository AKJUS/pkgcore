#!/usr/bin/python
# Copyright: 2005-2006 Brian Harring <ferringb@gmail.com>
# License: GPL2

import os
from pkgcore.package.atom import atom
from pkgcore.restrictions import packages, values, boolean
from pkgcore.util.currying import pre_curry
from pkgcore.util import repo_utils, commandline

def grab_arg(arg, args):
	val = False
	try:
		while True:
			args.remove(arg)
			val = True
	except ValueError:
		pass
	return val

if __name__ == "__main__":
	import sys, pkgcore.config
	a = sys.argv[1:]
	raw = grab_arg("--raw", a)
	force_vdb = grab_arg("--vdb", a)
	force_virtuals = grab_arg("--virtuals-only", a)
	disable_virtuals = grab_arg("--disable-virtuals", a)

	if "--atomstr" in a:
		def atomstr(a, l=False):
			if l:
				l = iter(a)
			else:
				l = [a]
			s = []
			for x in l:
				if isinstance(x, atom):
					s.append(x.atom_str())
				else:
					s.append(str(x))
			return ' '.join(s)
		del a[a.index("--atomstr")]
	else:
		atomstr = lambda x, y=False: str(x)

	if len(a) == 0 or "--help" in a or (force_virtuals and disable_virtuals) or ("--max" in a and "--min" in a):
		print "supported args: [--raw] [--virtuals-only || --disable-virtuals ] [--vdb] [ --max || --min ] [--atomstr] [atom [ --attr attr ] ]*"
		sys.exit(1)
	conf = pkgcore.config.load_config()
	if len(conf.domain) != 1:
		print "sorry, I don't know about domains aside from using the only one I find"
		sys.exit(2)
	domain = conf.domain.items()[0][1]
	repos = []
	if force_vdb:
		repos = conf.domain["livefs domain"].vdb
	else:
		repos = conf.domain["livefs domain"].repos
	if raw:
		repos = repo_utils.get_raw_repos(repos)
	if force_virtuals:
		repos = repo_utils.get_virtual_repos(repo_utils.get_raw_repos(repos))
	elif disable_virtuals:
		repos = repo_utils.get_virtual_repos(repo_utils.get_raw_repos(repos), False)

	atoms = []
	attr = []
	while "--attr" in a:
		i = a.index("--attr")
		a.pop(i)
		try:
			attr.append(a.pop(i))
		except IndexError:
			print "need an arg to --attr!"
			sys.exit(1)

	results_filter = lambda a: a
	def less_pissy_builtins(func, *args, **kwds):
		try:
			return func(*args, **kwds)
		except ValueError:
			return []
	for s, f in (("--min", min), ("--max", max)):
		func = pre_curry(lambda inner_func,a: [inner_func(a)],
			pre_curry(less_pissy_builtins, f))
		if grab_arg(s, a):
			results_filter = func

	atoms = map(commandline.generate_restriction, a)

	if len(atoms) > 1:
		atoms = packages.OrRestriction(*atoms)
	for a in atoms:
		for repo in repos:
			for pkg in results_filter(repo.itermatch(a, sorter=pre_curry(sorted, reverse=True))):
				try:	print str(atomstr(pkg))
				except AttributeError:
					print str(pkg)
				for x in attr:
					try:	print "attr '%s' == %s" % (x, atomstr(getattr(pkg, x), True))
					except AttributeError, ae:
						print "attr '%s' exception: %s" % (x, ae)
				print
		
	sys.exit(0)
