#!/usr/bin/python
# Copyright: 2005 Gentoo Foundation
# Author(s): Brian Harring (ferringb@gentoo.org)
# License: GPL2
# $Id:$

if __name__ == "__main__":
	import sys, portage.config
	from portage.package.atom import atom
	from portage.restrictions import packages, values, boolean
	a = sys.argv[1:]
	if "--raw" in a:
		raw = True
		del a[a.index("--raw")]
	else: raw = False
	if "--atomstr" in a:
		def atomstr(a, l=False):
			if l:
				l = iter(a)
			else:
				l = [a]
			s = []
			for x in l:
				if isinstance(x, atom):
					s.append(x.atom_str())
				else:
					s.append(str(x))
			return ' '.join(s)
		del a[a.index("--atomstr")]
	else:
		atomstr = lambda x, y=False: str(x)

	if len(a) == 0:
		print "supported args: [--raw] [--atomstr] atom [ --attr attr ]"
		sys.exit(1)
	conf = portage.config.load_config()
	if len(conf.domain) != 1:
		print "sorry, I don't know about domains aside from using the only one I find"
		sys.exit(2)
	domain = conf.domain.items()[0][1]
	repos = []
	if raw:
		for r in domain.repos:
			while r.raw_repo != None:
				r = r.raw_repo
			repos.append(r)
	else:
		repos.extend(domain.repos)

	atoms = []
	if "--attr" in a:
		i = a.index("--attr")
		a.pop(i)
		try:
			attr = a.pop(i)
		except IndexError:
			print "need an arg to --attr!"
			sys.exit(1)
	else:
		attr = None
	for x in a:
		if "*" in x:
			x = x.split("/", 1)
			if len(x) > 1:
				r = packages.AndRestriction()
				def check_glob_pos(x):
					if x.startswith("*"):
						prefix = True
					elif x.endswith("*"):
						prefix = False
					else:
						raise TypeError("'*' must be specified at the end or beginning of a matching field")
					return x.strip("*")
				if "*" in x[0]:
					x[0] = check_glob_pos(x[0])
					if len(x[0]):
						cat = values.StrGlobMatch(x[0])
					else:
						cat = None
				else:
					cat = values.StrExactMatch(x[0])
				if cat is not None:
					r.add_restriction(packages.PackageRestriction("category", cat))
				if "*" in x[1]:
					x[1] = check_glob_pos(x[1])
					if len(x[1]):
						pkg = values.StrGlobMatch(x[1])
					else:
						pkg = None
				else:
					pkg = values.StrExactMatch(x[1])
				if pkg is not None:
					r.add_restriction(packages.PackageRestriction("package", pkg))
			else:
				r = packages.PackageRestriction("package", values.StrGlobMatch(x[0]))
			atoms.append(r)
		else:
			atoms.append(atom(x))
	if len(atoms) > 1:
		atoms = packages.OrRestriction(*atoms)
	for a in atoms:
		for repo in repos:
			for pkg in repo.itermatch(a):
				try:	print str(atomstr(pkg))
				except AttributeError:
					print str(pkg)
				if attr is not None:
					try:	print "attr == %s" % atomstr(getattr(pkg, attr), True)
					except AttributeError, ae:
						print "attr exception: %s" % ae
	sys.exit(0)
